// <auto-generated />
using System;
using Artysan_DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Artysan_DAL.Migrations
{
    [DbContext(typeof(ArtysanDbContext))]
    [Migration("20240819154000_Images")]
    partial class Images
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Artysan_DAL.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Artysan_DAL.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Artysan_Entities.Entites.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArtImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArtistLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArtistName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("artists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtImageUrl = "../img/resim.com",
                            ArtistLink = "www.example.com",
                            ArtistName = "Hande Yener"
                        },
                        new
                        {
                            Id = 2,
                            ArtImageUrl = "../img/resim.com",
                            ArtistLink = "www.example.com"
                        },
                        new
                        {
                            Id = 3,
                            ArtImageUrl = "/img/resim.com",
                            ArtistLink = "www.example.com"
                        },
                        new
                        {
                            Id = 4,
                            ArtImageUrl = "/img/resim.com",
                            ArtistLink = "www.example.com"
                        },
                        new
                        {
                            Id = 5,
                            ArtImageUrl = "../img/resim.com",
                            ArtistLink = "www.example.com"
                        },
                        new
                        {
                            Id = 6,
                            ArtImageUrl = "../img/artists/sezen-aksu.jpg",
                            ArtistLink = "www.example.com/sezen-aksu",
                            ArtistName = "Sezen Aksu"
                        },
                        new
                        {
                            Id = 7,
                            ArtImageUrl = "../img/theatre/hamlet.jpg",
                            ArtistLink = "www.example.com/devlet-tiyatrolari"
                        },
                        new
                        {
                            Id = 8,
                            ArtImageUrl = "../img/sports/basketball.jpg",
                            ArtistLink = "www.example.com/turkish-basketball-league"
                        },
                        new
                        {
                            Id = 9,
                            ArtImageUrl = "../img/directors/james-cameron.jpg",
                            ArtistLink = "www.example.com/james-cameron"
                        },
                        new
                        {
                            Id = 10,
                            ArtImageUrl = "../img/workshop/photoshop-icon.jpg",
                            ArtistLink = "www.example.com/adobe-experts"
                        });
                });

            modelBuilder.Entity("Artysan_Entities.Entites.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("CatDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            id = 1,
                            CatName = "Konser"
                        },
                        new
                        {
                            id = 2,
                            CatDescription = "Tiyatro oyunu",
                            CatName = "Tiyatro"
                        },
                        new
                        {
                            id = 3,
                            CatDescription = "Futbol Maçı",
                            CatName = "Spor"
                        },
                        new
                        {
                            id = 4,
                            CatName = "Sinema"
                        },
                        new
                        {
                            id = 5,
                            CatName = "Workshop"
                        },
                        new
                        {
                            id = 6,
                            CatName = "Konser"
                        },
                        new
                        {
                            id = 7,
                            CatDescription = "Klasik tiyatro oyunu",
                            CatName = "Tiyatro"
                        },
                        new
                        {
                            id = 8,
                            CatDescription = "Basketbol Maçı",
                            CatName = "Spor"
                        },
                        new
                        {
                            id = 9,
                            CatName = "Sinema"
                        },
                        new
                        {
                            id = 10,
                            CatName = "Workshop"
                        });
                });

            modelBuilder.Entity("Artysan_Entities.Entites.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("EventDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Stock")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TicketId");

                    b.ToTable("events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            EventDate = "21.08.2024",
                            ImageUrl = "/img/Concert/resim.jpg",
                            LocationId = 1,
                            Name = "POP Gecesi Festivali",
                            Stock = 500
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            EventDate = "21.09.2024",
                            ImageUrl = "/img/Theatre/lukus.jpg",
                            LocationId = 2,
                            Name = "Lüküs Hayat",
                            Stock = 500
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            EventDate = "21.08.2024",
                            ImageUrl = "/img/Sport/gs.jpg",
                            LocationId = 3,
                            Name = "Galatasaray-Konyaspor",
                            Stock = 500
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            EventDate = "10.09.2024",
                            ImageUrl = "../img/Cinema/dune.jpg",
                            LocationId = 4,
                            Name = "Dune Çöl Gezegeni",
                            Stock = 500
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            EventDate = "21.08.2024",
                            ImageUrl = "/img/Workshop/gandalf.jpg",
                            LocationId = 5,
                            Name = "Gandalf Heykel Workshop",
                            Stock = 500
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            EventDate = "15.12.2024",
                            ImageUrl = "/img/Concert/sezen.jpg",
                            LocationId = 6,
                            Name = "Sezen Aksu Yılbaşı Özel Konseri",
                            Stock = 400
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            EventDate = "05.01.2025",
                            ImageUrl = "/img/Theatre/hamlet.jpg",
                            LocationId = 7,
                            Name = "Hamlet",
                            Stock = 300
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            EventDate = "22.02.2025",
                            ImageUrl = "/img/Sport/efes.jpg",
                            LocationId = 8,
                            Name = "Fenerbahçe Beko - Anadolu Efes",
                            Stock = 1000
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            EventDate = "10.03.2025",
                            ImageUrl = "/img/Cinema/avatar.jpg",
                            LocationId = 9,
                            Name = "Avatar 3 Galası",
                            Stock = 200
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            EventDate = "18.04.2025",
                            ImageUrl = "/img/Workshop/psdw.jpg",
                            LocationId = 10,
                            Name = "Adobe Photoshop Masterclass",
                            Stock = 50
                        });
                });

            modelBuilder.Entity("Artysan_Entities.Entites.EventArtist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("EventId");

                    b.ToTable("eventArtists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtistId = 1,
                            EventId = 1
                        },
                        new
                        {
                            Id = 2,
                            ArtistId = 2,
                            EventId = 2
                        },
                        new
                        {
                            Id = 3,
                            ArtistId = 3,
                            EventId = 3
                        },
                        new
                        {
                            Id = 4,
                            ArtistId = 4,
                            EventId = 4
                        },
                        new
                        {
                            Id = 5,
                            ArtistId = 5,
                            EventId = 5
                        },
                        new
                        {
                            Id = 6,
                            ArtistId = 6,
                            EventId = 6
                        },
                        new
                        {
                            Id = 7,
                            ArtistId = 7,
                            EventId = 7
                        },
                        new
                        {
                            Id = 8,
                            ArtistId = 8,
                            EventId = 8
                        },
                        new
                        {
                            Id = 9,
                            ArtistId = 9,
                            EventId = 9
                        },
                        new
                        {
                            Id = 10,
                            ArtistId = 10,
                            EventId = 10
                        });
                });

            modelBuilder.Entity("Artysan_Entities.Entites.EventSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("SalDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventSale");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 2,
                            EventId = 1,
                            SalDate = "09.11.2024",
                            TotalPrice = 1000m,
                            TotalQuantity = 300
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            EventId = 2,
                            SalDate = "09.11.2024",
                            TotalPrice = 1000m,
                            TotalQuantity = 300
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3,
                            EventId = 3,
                            SalDate = "09.11.2024",
                            TotalPrice = 1000m,
                            TotalQuantity = 300
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 4,
                            EventId = 4,
                            SalDate = "09.11.2024",
                            TotalPrice = 1000m,
                            TotalQuantity = 300
                        },
                        new
                        {
                            Id = 5,
                            CustomerId = 5,
                            EventId = 5,
                            SalDate = "09.11.2024",
                            TotalPrice = 1000m,
                            TotalQuantity = 300
                        },
                        new
                        {
                            Id = 6,
                            CustomerId = 6,
                            EventId = 6,
                            SalDate = "01.10.2024",
                            TotalPrice = 1500m,
                            TotalQuantity = 250
                        },
                        new
                        {
                            Id = 7,
                            CustomerId = 7,
                            EventId = 7,
                            SalDate = "15.11.2024",
                            TotalPrice = 600m,
                            TotalQuantity = 150
                        },
                        new
                        {
                            Id = 8,
                            CustomerId = 8,
                            EventId = 8,
                            SalDate = "10.01.2025",
                            TotalPrice = 1500m,
                            TotalQuantity = 500
                        },
                        new
                        {
                            Id = 9,
                            CustomerId = 9,
                            EventId = 9,
                            SalDate = "01.02.2025",
                            TotalPrice = 1500m,
                            TotalQuantity = 100
                        },
                        new
                        {
                            Id = 10,
                            CustomerId = 10,
                            EventId = 10,
                            SalDate = "01.03.2025",
                            TotalPrice = 3000m,
                            TotalQuantity = 30
                        });
                });

            modelBuilder.Entity("Artysan_Entities.Entites.EventSaleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("EventSaleId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventSaleId");

                    b.ToTable("EventSaleDetail");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            EventSaleId = 1,
                            Quantity = 2,
                            UnitPrice = 400m
                        },
                        new
                        {
                            Id = 2,
                            EventId = 2,
                            EventSaleId = 2,
                            Quantity = 2,
                            UnitPrice = 400m
                        },
                        new
                        {
                            Id = 3,
                            EventId = 3,
                            EventSaleId = 3,
                            Quantity = 2,
                            UnitPrice = 400m
                        },
                        new
                        {
                            Id = 4,
                            EventId = 4,
                            EventSaleId = 4,
                            Quantity = 2,
                            UnitPrice = 400m
                        },
                        new
                        {
                            Id = 5,
                            EventId = 5,
                            EventSaleId = 5,
                            Quantity = 2,
                            UnitPrice = 400m
                        },
                        new
                        {
                            Id = 6,
                            EventId = 6,
                            EventSaleId = 6,
                            Quantity = 2,
                            UnitPrice = 750m
                        },
                        new
                        {
                            Id = 7,
                            EventId = 7,
                            EventSaleId = 7,
                            Quantity = 3,
                            UnitPrice = 200m
                        },
                        new
                        {
                            Id = 8,
                            EventId = 8,
                            EventSaleId = 8,
                            Quantity = 5,
                            UnitPrice = 300m
                        },
                        new
                        {
                            Id = 9,
                            EventId = 9,
                            EventSaleId = 9,
                            Quantity = 10,
                            UnitPrice = 150m
                        },
                        new
                        {
                            Id = 10,
                            EventId = 10,
                            EventSaleId = 10,
                            Quantity = 3,
                            UnitPrice = 1000m
                        });
                });

            modelBuilder.Entity("Artysan_Entities.Entites.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EventUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventUrl = "www.example.com",
                            LocImageUrl = "/img/hande.jpeg",
                            Venue = "Ankara Oran Açıkhava Sahnesi"
                        },
                        new
                        {
                            Id = 2,
                            EventUrl = "www.example.com",
                            LocImageUrl = "../img/resim.jpg",
                            Venue = "Antalya Alanya Açıkhava Tiyatrosu"
                        },
                        new
                        {
                            Id = 3,
                            EventUrl = "www.example.com",
                            LocImageUrl = "../img/gs.jpg",
                            Venue = "Rams Park Arena"
                        },
                        new
                        {
                            Id = 4,
                            EventUrl = "www.example.com",
                            LocImageUrl = "/img/resim.jpg",
                            Venue = "Paribu Istinye Park"
                        },
                        new
                        {
                            Id = 5,
                            EventUrl = "www.example.com",
                            LocImageUrl = "/img/resim.jpg",
                            Venue = "Istanbul Workshop"
                        },
                        new
                        {
                            Id = 6,
                            EventUrl = "www.example.com/sezen-aksu-izmir",
                            LocImageUrl = "../img/izmir-kulturpark.jpg",
                            Venue = "İzmir Kültürpark Açıkhava Tiyatrosu"
                        },
                        new
                        {
                            Id = 7,
                            EventUrl = "www.example.com/hamlet-ankara",
                            LocImageUrl = "../img/ankara-devlet-tiyatrosu.jpg",
                            Venue = "Ankara Devlet Tiyatrosu"
                        },
                        new
                        {
                            Id = 8,
                            EventUrl = "www.example.com/fenerbahce-efes",
                            LocImageUrl = "../img/ulker-sports-arena.jpg",
                            Venue = "Ülker Sports Arena"
                        },
                        new
                        {
                            Id = 9,
                            EventUrl = "www.example.com/avatar3-premiere",
                            LocImageUrl = "../img/cinemaximum-zorlu.jpg",
                            Venue = "Cinemaximum Zorlu Center"
                        },
                        new
                        {
                            Id = 10,
                            EventUrl = "www.example.com/photoshop-masterclass",
                            LocImageUrl = "../img/atasehir-sanat-merkezi.jpg",
                            Venue = "Ataşehir Sanat Merkezi"
                        });
                });

            modelBuilder.Entity("Artysan_Entities.Entites.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TicketName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 500m,
                            TicketName = "Standart"
                        },
                        new
                        {
                            Id = 2,
                            Price = 500m,
                            TicketName = "Standart"
                        },
                        new
                        {
                            Id = 3,
                            Price = 500m,
                            TicketName = "Standart"
                        },
                        new
                        {
                            Id = 4,
                            Price = 500m,
                            TicketName = "Standart"
                        },
                        new
                        {
                            Id = 5,
                            Price = 500m,
                            TicketName = "Standart"
                        },
                        new
                        {
                            Id = 6,
                            Price = 750m,
                            TicketName = "VIP"
                        },
                        new
                        {
                            Id = 7,
                            Price = 200m,
                            TicketName = "Öğrenci"
                        },
                        new
                        {
                            Id = 8,
                            Price = 300m,
                            TicketName = "Tribün"
                        },
                        new
                        {
                            Id = 9,
                            Price = 150m,
                            TicketName = "Gold Class"
                        },
                        new
                        {
                            Id = 10,
                            Price = 1000m,
                            TicketName = "Premium"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Artysan_Entities.Entites.Event", b =>
                {
                    b.HasOne("Artysan_Entities.Entites.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Artysan_Entities.Entites.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationId");

                    b.HasOne("Artysan_Entities.Entites.Ticket", null)
                        .WithMany("Events")
                        .HasForeignKey("TicketId");

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Artysan_Entities.Entites.EventArtist", b =>
                {
                    b.HasOne("Artysan_Entities.Entites.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Artysan_Entities.Entites.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.Navigation("Artist");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Artysan_Entities.Entites.EventSale", b =>
                {
                    b.HasOne("Artysan_Entities.Entites.Event", null)
                        .WithMany("EventSales")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("Artysan_Entities.Entites.EventSaleDetail", b =>
                {
                    b.HasOne("Artysan_Entities.Entites.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("Artysan_Entities.Entites.EventSale", "EventSale")
                        .WithMany("EventSaleDetails")
                        .HasForeignKey("EventSaleId");

                    b.Navigation("Event");

                    b.Navigation("EventSale");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Artysan_DAL.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Artysan_DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Artysan_DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Artysan_DAL.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Artysan_DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Artysan_DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Artysan_Entities.Entites.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Artysan_Entities.Entites.Event", b =>
                {
                    b.Navigation("EventSales");
                });

            modelBuilder.Entity("Artysan_Entities.Entites.EventSale", b =>
                {
                    b.Navigation("EventSaleDetails");
                });

            modelBuilder.Entity("Artysan_Entities.Entites.Location", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Artysan_Entities.Entites.Ticket", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
